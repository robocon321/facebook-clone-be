---
version: "3.7"
services:
  ## MySQL
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    ports:
      - "${DB_PORT}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    extends:
      file: common-config.yml
      service: microservice-base-config
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    healthcheck:
      test: "wget -q --spider http://localhost:9411/health || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "zipkin-server"

  ## Eureka Server
  discovery-server:
    image: robocon321/discovery-server:latest
    container_name: discovery-server
    ports:
      - "9091:9091"
    depends_on:
      zipkin:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9091/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "discovery-server"
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}
      ZIPKIN_HOST: ${ZIPKIN_HOST}

  ## Api Gateway
  api-gateway:
    image: robocon321/api-gateway:latest
    container_name: api-gateway
    ports:
      - "9090:9090"
    depends_on:
      zipkin:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9090/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "api-gateway"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## Account-Service Docker Compose Config
  account-service:
    container_name: account-service
    image: robocon321/account-service:latest
    ports:
      - "9001:9001"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9001/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "account-service"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## Auth-Service Docker Compose Config
  auth-service:
    container_name: auth-service
    image: robocon321/auth-service:latest
    ports:
      - "9002:9002"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9002/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "auth-service"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## File-Service Docker Compose Config
  file-service:
    container_name: file-service
    image: robocon321/file-service:latest
    ports:
      - "9003:9003"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9003/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "file-service"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## Location-Service Docker Compose Configs
  location-service:
    container_name: location-service
    image: robocon321/location-service:latest
    ports:
      - "9004:9004"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9004/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "location-service"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## Post-Service Docker Compose Config
  post-service:
    container_name: post-service
    image: robocon321/post-service:latest
    ports:
      - "9005:9005"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9005/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "post-service"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## Realtime-Service Docker Compose Config
  realtime-service:
    container_name: realtime-service
    image: robocon321/realtime-service:latest
    ports:
      - "9006:9006"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:9006/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "realtime-service"
      DB_PROTOCOL: ${DB_PROTOCOL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      DB_HIBERNATE_DIALECT: ${DB_HIBERNATE_DIALECT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SPRING_SECURITY_USERNAME: ${SPRING_SECURITY_USERNAME}
      SPRING_SECURITY_PASSWORD: ${SPRING_SECURITY_PASSWORD}
      ZIPKIN_HOST: ${ZIPKIN_HOST}
      DISCOVERYSERVER_HOST: ${DISCOVERYSERVER_HOST}

  ## Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9900:9090"
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      account-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      file-service:
        condition: service_healthy
      location-service:
        condition: service_healthy
      post-service:
        condition: service_healthy
      realtime-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://zipkin:9090 | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
      start_interval: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      SERVER_NAME: "prometheus"

  # Grafana
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ../grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    extends:
      file: common-config.yml
      service: microservice-base-config

networks:
  robocon321:
    driver: "bridge"
